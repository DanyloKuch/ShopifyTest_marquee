{% comment %}
  Marquee Products Section for Shopify
  Displays 6 products in a horizontal scrolling marquee with prices fetched from FakeStoreAPI
{% endcomment %}

{% style %}
  .marquee {
    overflow: hidden;
    width: 100%;
    white-space: nowrap;
  }
  .marquee-inner {
    display: inline-flex;
    animation: marquee 20s linear infinite;
  }
  .marquee-inner:hover, .marquee-inner:focus-within {
    animation-play-state: paused;
  }
  @keyframes marquee {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); }
  }
  .product-card {
    flex: 0 0 200px;
    margin-right: 20px;
    text-align: center;
  }
  .product-card img {
    max-width: 100%;
    height: auto;
  }
  .product-card h3 {
    font-size: 16px;
    margin: 10px 0;
  }
  .product-card p {
    font-size: 14px;
    color: #666;
    margin: 0 0 10px;
  }
  .product-card span {
    font-weight: bold;
  }
  @media (prefers-reduced-motion: reduce) {
    .marquee-inner {
      animation: none;
      overflow-x: auto;
    }
  }
  @media (max-width: 768px) {
    .product-card {
      flex: 0 0 150px;
    }
    .marquee-inner {
      animation-duration: 15s;
    }
  }
{% endstyle %}

<div class="marquee" role="region" aria-label="Product marquee">
  <div class="marquee-inner">
    {% for block in section.blocks %}
      <div class="product-card" data-product-id="{{ block.settings.product_id | escape }}" aria-label="Product: {{ block.settings.product_title | escape }}">
        {% if block.settings.product_image %}
          <img src="{{ block.settings.product_image | img_url: 'medium' }}" alt="{{ block.settings.product_title | escape }}" loading="lazy">
        {% else %}
          <img src="https://via.placeholder.com/150" alt="Placeholder" loading="lazy">
        {% endif %}
        <h3>{{ block.settings.product_title | escape }}</h3>
        <p>{{ block.settings.product_description | truncate: 120 | escape }}</p>
        <span id="price-{{ block.id }}">Loading...</span>
      </div>
    {% endfor %}
    {% comment %} Duplicate content for seamless animation {% endcomment %}
    {% for block in section.blocks %}
      <div class="product-card" data-product-id="{{ block.settings.product_id | escape }}" aria-label="Product: {{ block.settings.product_title | escape }}">
        {% if block.settings.product_image %}
          <img src="{{ block.settings.product_image | img_url: 'medium' }}" alt="{{ block.settings.product_title | escape }}" loading="lazy">
        {% else %}
          <img src="https://via.placeholder.com/150" alt="Placeholder" loading="lazy">
        {% endif %}
        <h3>{{ block.settings.product_title | escape }}</h3>
        <p>{{ block.settings.product_description | truncate: 120 | escape }}</p>
        <span id="price-{{ block.id }}-duplicate">Loading...</span>
      </div>
    {% endfor %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const fetchPrice = async (productId, elementId) => {
      try {
        if (!productId || isNaN(productId) || productId < 1 || productId > 20) {
          throw new Error('Invalid product ID');
        }
        const cachedPrice = localStorage.getItem(`price-${productId}`);
        if (cachedPrice) {
          document.getElementById(elementId).textContent = cachedPrice;
          return;
        }
        const response = await fetch(`https://fakestoreapi.com/products/${productId}`);
        if (!response.ok) throw new Error('API unavailable');
        const data = await response.json();
        const price = `$${data.price.toFixed(2)}`;
        document.getElementById(elementId).textContent = price;
        localStorage.setItem(`price-${productId}`, price);
      } catch (error) {
        console.error('Error fetching price:', error);
        document.getElementById(elementId).textContent = 'Price unavailable';
      }
    };

    const productCards = document.querySelectorAll('.product-card');
    Promise.all(
      Array.from(productCards).map(card => {
        const productId = card.dataset.productId;
        const priceElementId = card.querySelector('span').id;
        return fetchPrice(productId, priceElementId);
      })
    );
  });
</script>

{% schema %}
{
  "name": "Marquee Products",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "limit": 6,
      "settings": [
        {
          "type": "text",
          "id": "product_title",
          "label": "Product Title",
          "default": "Product Name"
        },
        {
          "type": "textarea",
          "id": "product_description",
          "label": "Product Description",
          "info": "Up to 120 characters",
          "default": "Short description of the product."
        },
        {
          "type": "image_picker",
          "id": "product_image",
          "label": "Product Image"
        },
        {
          "type": "text",
          "id": "product_id",
          "label": "Product API ID",
          "info": "Enter a number between 1 and 20 for FakeStoreAPI",
          "default": "1"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Marquee Products",
      "blocks": [
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" }
      ]
    }
  ]
}
{% endschema %}